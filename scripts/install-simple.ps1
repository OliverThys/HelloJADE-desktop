# HelloJADE v1.0 - Script d'installation simplifi√©
# Installation automatique pour Windows

Write-Host "============================================================" -ForegroundColor Cyan
Write-Host " HelloJADE v1.0 - Installation Windows" -ForegroundColor Cyan
Write-Host "============================================================" -ForegroundColor Cyan
Write-Host ""

# V√©rifier les privil√®ges administrateur
$currentUser = [Security.Principal.WindowsIdentity]::GetCurrent()
$principal = New-Object Security.Principal.WindowsPrincipal($currentUser)
if (!$principal.IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)) {
    Write-Host "‚ùå Ce script n√©cessite des privil√®ges administrateur" -ForegroundColor Red
    Write-Host "‚ÑπÔ∏è  Veuillez relancer PowerShell en tant qu'administrateur" -ForegroundColor Blue
    exit 1
}

Write-Host "‚úÖ Privil√®ges administrateur v√©rifi√©s" -ForegroundColor Green

# V√©rifier la version de PowerShell
$version = $PSVersionTable.PSVersion
if ($version.Major -lt 5) {
    Write-Host "‚ùå PowerShell 5.0 ou sup√©rieur est requis. Version actuelle: $version" -ForegroundColor Red
    exit 1
}
Write-Host "‚úÖ PowerShell version $version d√©tect√©e" -ForegroundColor Green

# √âtape 1: Installation de Chocolatey
Write-Host ""
Write-Host "============================================================" -ForegroundColor Cyan
Write-Host " Installation de Chocolatey" -ForegroundColor Cyan
Write-Host "============================================================" -ForegroundColor Cyan

if (!(Get-Command choco -ErrorAction SilentlyContinue)) {
    Write-Host "üì¶ Installation de Chocolatey..." -ForegroundColor Yellow
    Set-ExecutionPolicy Bypass -Scope Process -Force
    [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
    iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
    Write-Host "‚úÖ Chocolatey install√© avec succ√®s" -ForegroundColor Green
} else {
    Write-Host "‚úÖ Chocolatey d√©j√† install√©" -ForegroundColor Green
}

# √âtape 2: Installation des pr√©requis
Write-Host ""
Write-Host "============================================================" -ForegroundColor Cyan
Write-Host " Installation des pr√©requis" -ForegroundColor Cyan
Write-Host "============================================================" -ForegroundColor Cyan

# Git
if (!(Get-Command git -ErrorAction SilentlyContinue)) {
    Write-Host "üì¶ Installation de Git..." -ForegroundColor Yellow
    choco install git -y
    refreshenv
    Write-Host "‚úÖ Git install√© avec succ√®s" -ForegroundColor Green
} else {
    Write-Host "‚úÖ Git d√©j√† install√©" -ForegroundColor Green
}

# Python 3.11
if (!(Get-Command python -ErrorAction SilentlyContinue)) {
    Write-Host "üì¶ Installation de Python 3.11..." -ForegroundColor Yellow
    choco install python311 -y
    refreshenv
    Write-Host "‚úÖ Python 3.11 install√© avec succ√®s" -ForegroundColor Green
} else {
    Write-Host "‚úÖ Python d√©j√† install√©" -ForegroundColor Green
}

# Node.js
if (!(Get-Command node -ErrorAction SilentlyContinue)) {
    Write-Host "üì¶ Installation de Node.js..." -ForegroundColor Yellow
    choco install nodejs -y
    refreshenv
    Write-Host "‚úÖ Node.js install√© avec succ√®s" -ForegroundColor Green
} else {
    Write-Host "‚úÖ Node.js d√©j√† install√©" -ForegroundColor Green
}

# Rust
if (!(Get-Command rustc -ErrorAction SilentlyContinue)) {
    Write-Host "üì¶ Installation de Rust..." -ForegroundColor Yellow
    choco install rust -y
    refreshenv
    Write-Host "‚úÖ Rust install√© avec succ√®s" -ForegroundColor Green
} else {
    Write-Host "‚úÖ Rust d√©j√† install√©" -ForegroundColor Green
}

# Docker Desktop
if (!(Get-Command docker -ErrorAction SilentlyContinue)) {
    Write-Host "üì¶ Installation de Docker Desktop..." -ForegroundColor Yellow
    choco install docker-desktop -y
    Write-Host "‚úÖ Docker Desktop install√© avec succ√®s" -ForegroundColor Green
    Write-Host "‚ö†Ô∏è  Veuillez red√©marrer votre machine apr√®s l'installation" -ForegroundColor Yellow
} else {
    Write-Host "‚úÖ Docker Desktop d√©j√† install√©" -ForegroundColor Green
}

# √âtape 3: Configuration de l'environnement
Write-Host ""
Write-Host "============================================================" -ForegroundColor Cyan
Write-Host " Configuration de l'environnement" -ForegroundColor Cyan
Write-Host "============================================================" -ForegroundColor Cyan

# Cr√©er les r√©pertoires n√©cessaires
$directories = @(
    "logs",
    "backups", 
    "uploads",
    "temp",
    "ai/models",
    "ai/models/whisper",
    "ai/models/piper",
    "ai/models/ollama",
    "recordings",
    "cache/audio"
)

foreach ($dir in $directories) {
    if (!(Test-Path $dir)) {
        New-Item -ItemType Directory -Path $dir -Force | Out-Null
        Write-Host "üìÅ R√©pertoire cr√©√©: $dir" -ForegroundColor Green
    } else {
        Write-Host "üìÅ R√©pertoire existant: $dir" -ForegroundColor Blue
    }
}

# √âtape 4: Installation du backend Python
Write-Host ""
Write-Host "============================================================" -ForegroundColor Cyan
Write-Host " Installation du backend Python" -ForegroundColor Cyan
Write-Host "============================================================" -ForegroundColor Cyan

if (Test-Path "backend/requirements.txt") {
    Write-Host "üì¶ Installation des d√©pendances Python..." -ForegroundColor Yellow
    python -m pip install --upgrade pip
    python -m pip install -r backend/requirements.txt
    Write-Host "‚úÖ D√©pendances Python install√©es" -ForegroundColor Green
} else {
    Write-Host "‚ö†Ô∏è  Fichier requirements.txt non trouv√©" -ForegroundColor Yellow
}

# √âtape 5: Installation du frontend Node.js
Write-Host ""
Write-Host "============================================================" -ForegroundColor Cyan
Write-Host " Installation du frontend Node.js" -ForegroundColor Cyan
Write-Host "============================================================" -ForegroundColor Cyan

if (Test-Path "frontend/package.json") {
    Write-Host "üì¶ Installation des d√©pendances Node.js..." -ForegroundColor Yellow
    Set-Location frontend
    npm install
    Set-Location ..
    Write-Host "‚úÖ D√©pendances Node.js install√©es" -ForegroundColor Green
} else {
    Write-Host "‚ö†Ô∏è  Fichier package.json non trouv√©" -ForegroundColor Yellow
}

# √âtape 6: D√©marrage de l'infrastructure Docker
Write-Host ""
Write-Host "============================================================" -ForegroundColor Cyan
Write-Host " D√©marrage de l'infrastructure Docker" -ForegroundColor Cyan
Write-Host "============================================================" -ForegroundColor Cyan

if (Test-Path "infrastructure/docker-compose.yml") {
    Write-Host "üê≥ D√©marrage des services Docker..." -ForegroundColor Yellow
    Set-Location infrastructure
    docker-compose up -d
    Set-Location ..
    Write-Host "‚úÖ Services Docker d√©marr√©s" -ForegroundColor Green
} else {
    Write-Host "‚ö†Ô∏è  Fichier docker-compose.yml non trouv√©" -ForegroundColor Yellow
}

# √âtape 7: Test de l'installation
Write-Host ""
Write-Host "============================================================" -ForegroundColor Cyan
Write-Host " Test de l'installation" -ForegroundColor Cyan
Write-Host "============================================================" -ForegroundColor Cyan

# V√©rifier les services
Write-Host "üîç V√©rification des services..." -ForegroundColor Yellow

if (Get-Command python -ErrorAction SilentlyContinue) {
    Write-Host "‚úÖ Python: OK" -ForegroundColor Green
} else {
    Write-Host "‚ùå Python: ERREUR" -ForegroundColor Red
}

if (Get-Command node -ErrorAction SilentlyContinue) {
    Write-Host "‚úÖ Node.js: OK" -ForegroundColor Green
} else {
    Write-Host "‚ùå Node.js: ERREUR" -ForegroundColor Red
}

if (Get-Command docker -ErrorAction SilentlyContinue) {
    Write-Host "‚úÖ Docker: OK" -ForegroundColor Green
} else {
    Write-Host "‚ùå Docker: ERREUR" -ForegroundColor Red
}

# R√©sum√© final
Write-Host ""
Write-Host "============================================================" -ForegroundColor Green
Write-Host " Installation termin√©e avec succ√®s" -ForegroundColor Green
Write-Host "============================================================" -ForegroundColor Green

Write-Host "üéâ HelloJADE v1.0 est maintenant install√© sur votre machine !" -ForegroundColor Green
Write-Host ""
Write-Host "üìã Prochaines √©tapes:" -ForegroundColor Cyan
Write-Host "1. Red√©marrer Docker Desktop si n√©cessaire" -ForegroundColor White
Write-Host "2. V√©rifier que tous les services sont d√©marr√©s" -ForegroundColor White
Write-Host "3. Acc√©der √† l'application via: http://localhost:3000" -ForegroundColor White
Write-Host "4. Acc√©der √† l'API via: http://localhost:5000" -ForegroundColor White
Write-Host ""
Write-Host "üìä Interfaces de monitoring:" -ForegroundColor Cyan
Write-Host "- Grafana: http://localhost:3000 (admin/HelloJADE_Grafana_2024!)" -ForegroundColor White
Write-Host "- Prometheus: http://localhost:9090" -ForegroundColor White
Write-Host "- Kibana: http://localhost:5601" -ForegroundColor White
Write-Host ""
Write-Host "üìö Documentation: docs/configuration-production.md" -ForegroundColor Cyan 