# HelloJADE v1.0 - Script de configuration simplifi√©
# PowerShell script pour configurer le fichier .env de production

Write-Host "============================================================" -ForegroundColor Cyan
Write-Host " HelloJADE v1.0 - Configuration des variables d'environnement" -ForegroundColor Cyan
Write-Host "============================================================" -ForegroundColor Cyan
Write-Host ""

# V√©rifier les privil√®ges administrateur
$currentUser = [Security.Principal.WindowsIdentity]::GetCurrent()
$principal = New-Object Security.Principal.WindowsPrincipal($currentUser)
if (!$principal.IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)) {
    Write-Host "‚ùå Ce script n√©cessite des privil√®ges administrateur" -ForegroundColor Red
    Write-Host "‚ÑπÔ∏è  Veuillez relancer PowerShell en tant qu'administrateur" -ForegroundColor Blue
    exit 1
}

Write-Host "‚úÖ Privil√®ges administrateur v√©rifi√©s" -ForegroundColor Green

# √âtape 1: Copie du fichier .env
Write-Host ""
Write-Host "============================================================" -ForegroundColor Cyan
Write-Host " Configuration des variables d'environnement" -ForegroundColor Cyan
Write-Host "============================================================" -ForegroundColor Cyan

$envSource = "env.production"
$envTarget = ".env"

if (!(Test-Path $envSource)) {
    Write-Host "‚ùå Fichier source $envSource non trouv√©" -ForegroundColor Red
    exit 1
}

if (Test-Path $envTarget) {
    Write-Host "‚ö†Ô∏è  Fichier .env existe d√©j√†" -ForegroundColor Yellow
    $response = Read-Host "Voulez-vous le remplacer ? (y/N)"
    if ($response -ne "y" -and $response -ne "Y") {
        Write-Host "‚ÑπÔ∏è  Configuration annul√©e" -ForegroundColor Blue
        exit 0
    }
    Remove-Item $envTarget -Force
}

try {
    Copy-Item $envSource $envTarget
    Write-Host "‚úÖ Fichier .env cr√©√© avec succ√®s" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Erreur lors de la cr√©ation du fichier .env: $($_.Exception.Message)" -ForegroundColor Red
    exit 1
}

# √âtape 2: Configuration des variables syst√®me
Write-Host ""
Write-Host "============================================================" -ForegroundColor Cyan
Write-Host " Configuration des variables syst√®me" -ForegroundColor Cyan
Write-Host "============================================================" -ForegroundColor Cyan

try {
    $content = Get-Content $envTarget
    $count = 0
    
    foreach ($line in $content) {
        if ($line -and $line -notmatch '^#' -and $line -match '=') {
            $parts = $line -split '=', 2
            if ($parts.Length -eq 2) {
                $name = $parts[0].Trim()
                $value = $parts[1].Trim()
                
                # Supprimer les guillemets si pr√©sents
                if ($value -match '^"(.*)"$') {
                    $value = $matches[1]
                }
                
                # D√©finir la variable d'environnement syst√®me
                [Environment]::SetEnvironmentVariable($name, $value, "Machine")
                $count++
            }
        }
    }
    
    Write-Host "‚úÖ $count variables d'environnement syst√®me configur√©es" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Erreur lors de la configuration des variables: $($_.Exception.Message)" -ForegroundColor Red
    exit 1
}

# √âtape 3: Configuration des permissions
Write-Host ""
Write-Host "============================================================" -ForegroundColor Cyan
Write-Host " Configuration des permissions de s√©curit√©" -ForegroundColor Cyan
Write-Host "============================================================" -ForegroundColor Cyan

try {
    $acl = Get-Acl $envTarget
    $rule = New-Object System.Security.AccessControl.FileSystemAccessRule("Administrators", "FullControl", "Allow")
    $acl.SetAccessRule($rule)
    Set-Acl $envTarget $acl
    Write-Host "‚úÖ Permissions de s√©curit√© configur√©es" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Erreur lors de la configuration des permissions: $($_.Exception.Message)" -ForegroundColor Red
    exit 1
}

# √âtape 4: Test de la configuration
Write-Host ""
Write-Host "============================================================" -ForegroundColor Cyan
Write-Host " Test de la configuration" -ForegroundColor Cyan
Write-Host "============================================================" -ForegroundColor Cyan

$requiredVars = @(
    "HELLOJADE_SECRET_KEY",
    "JWT_SECRET_KEY",
    "LDAP_SERVER",
    "ORACLE_HOST",
    "ZADARMA_SIP_LOGIN",
    "ZADARMA_SIP_PASSWORD"
)

$missingVars = @()

foreach ($var in $requiredVars) {
    $value = [Environment]::GetEnvironmentVariable($var, "Machine")
    if ([string]::IsNullOrEmpty($value)) {
        $missingVars += $var
    }
}

if ($missingVars.Count -gt 0) {
    Write-Host "‚ö†Ô∏è  Variables manquantes ou non configur√©es:" -ForegroundColor Yellow
    foreach ($var in $missingVars) {
        Write-Host "  - $var" -ForegroundColor Yellow
    }
    Write-Host "‚ùå Configuration incompl√®te" -ForegroundColor Red
    exit 1
}

Write-Host "‚úÖ Configuration valid√©e avec succ√®s" -ForegroundColor Green

# R√©sum√© final
Write-Host ""
Write-Host "============================================================" -ForegroundColor Cyan
Write-Host " R√©sum√© de la configuration" -ForegroundColor Cyan
Write-Host "============================================================" -ForegroundColor Cyan

Write-Host "üìÅ Fichier .env cr√©√©: $(Test-Path '.env')" -ForegroundColor $(if (Test-Path '.env') { 'Green' } else { 'Red' })
Write-Host "üîê Variables syst√®me configur√©es: ‚úÖ" -ForegroundColor Green
Write-Host "üîí Permissions s√©curis√©es: ‚úÖ" -ForegroundColor Green

Write-Host ""
Write-Host "üìã Variables importantes configur√©es:" -ForegroundColor Cyan
$importantVars = @(
    @{ Name = "LDAP_SERVER"; Value = [Environment]::GetEnvironmentVariable("LDAP_SERVER", "Machine") },
    @{ Name = "ORACLE_HOST"; Value = [Environment]::GetEnvironmentVariable("ORACLE_HOST", "Machine") },
    @{ Name = "ZADARMA_SIP_LOGIN"; Value = [Environment]::GetEnvironmentVariable("ZADARMA_SIP_LOGIN", "Machine") },
    @{ Name = "HELLOJADE_API_URL"; Value = [Environment]::GetEnvironmentVariable("HELLOJADE_API_URL", "Machine") }
)

foreach ($var in $importantVars) {
    $status = if ([string]::IsNullOrEmpty($var.Value)) { "‚ùå Non configur√©" } else { "‚úÖ Configur√©" }
    Write-Host "  $($var.Name): $status" -ForegroundColor $(if ([string]::IsNullOrEmpty($var.Value)) { 'Red' } else { 'Green' })
}

Write-Host ""
Write-Host "============================================================" -ForegroundColor Green
Write-Host " Configuration termin√©e avec succ√®s" -ForegroundColor Green
Write-Host "============================================================" -ForegroundColor Green
Write-Host "‚úÖ HelloJADE est maintenant configur√© pour la production" -ForegroundColor Green
Write-Host "‚ÑπÔ∏è  Vous pouvez maintenant lancer l'installation compl√®te avec: .\scripts\install.ps1" -ForegroundColor Blue 