-- Script de création du schéma projet HelloJADE
-- Ce schéma contient les tables spécifiques au projet, séparées de la base hospitalière

-- Créer le schéma projet
CREATE USER HELLOJADE_PROJECT IDENTIFIED BY "HelloJADE_Project_2024!"
DEFAULT TABLESPACE USERS
QUOTA UNLIMITED ON USERS;

-- Accorder les privilèges nécessaires
GRANT CONNECT, RESOURCE TO HELLOJADE_PROJECT;
GRANT CREATE SESSION TO HELLOJADE_PROJECT;
GRANT CREATE TABLE TO HELLOJADE_PROJECT;
GRANT CREATE SEQUENCE TO HELLOJADE_PROJECT;
GRANT CREATE VIEW TO HELLOJADE_PROJECT;
GRANT CREATE PROCEDURE TO HELLOJADE_PROJECT;

-- Se connecter au schéma projet
ALTER SESSION SET CURRENT_SCHEMA = HELLOJADE_PROJECT;

-- Séquences pour les IDs auto-incrémentés
CREATE SEQUENCE PROJECT_PATIENT_SEQ
    START WITH 1
    INCREMENT BY 1
    NOCACHE
    NOCYCLE;

CREATE SEQUENCE PROJECT_HOSPITALISATION_SEQ
    START WITH 1
    INCREMENT BY 1
    NOCACHE
    NOCYCLE;

CREATE SEQUENCE PROJECT_CALL_SEQ
    START WITH 1
    INCREMENT BY 1
    NOCACHE
    NOCYCLE;

-- Table de synchronisation des patients (copie de la base hospitalière)
CREATE TABLE PATIENTS_SYNC (
    PROJECT_PATIENT_ID NUMBER DEFAULT PROJECT_PATIENT_SEQ.NEXTVAL PRIMARY KEY,
    HOSPITAL_PATIENT_ID NUMBER NOT NULL UNIQUE,
    NUMERO_PATIENT VARCHAR2(20),
    NOM VARCHAR2(100),
    PRENOM VARCHAR2(100),
    DATE_NAISSANCE DATE,
    TELEPHONE VARCHAR2(20),
    DATE_CREATION DATE DEFAULT SYSDATE,
    DATE_MODIFICATION DATE DEFAULT SYSDATE,
    STATUT_SYNC VARCHAR2(20) DEFAULT 'ACTIVE'
);

-- Table de synchronisation des hospitalisations (copie de la base hospitalière)
CREATE TABLE HOSPITALISATIONS_SYNC (
    PROJECT_HOSPITALISATION_ID NUMBER DEFAULT PROJECT_HOSPITALISATION_SEQ.NEXTVAL PRIMARY KEY,
    HOSPITAL_HOSPITALISATION_ID NUMBER NOT NULL UNIQUE,
    PROJECT_PATIENT_ID NUMBER NOT NULL,
    SERVICE VARCHAR2(100),
    MEDECIN VARCHAR2(100),
    DATE_SORTIE DATE,
    STATUT VARCHAR2(20),
    DATE_CREATION DATE DEFAULT SYSDATE,
    DATE_MODIFICATION DATE DEFAULT SYSDATE,
    STATUT_SYNC VARCHAR2(20) DEFAULT 'ACTIVE',
    CONSTRAINT fk_hosp_patient FOREIGN KEY (PROJECT_PATIENT_ID) REFERENCES PATIENTS_SYNC(PROJECT_PATIENT_ID)
);

-- Table des appels (données spécifiques au projet)
CREATE TABLE CALLS (
    PROJECT_CALL_ID NUMBER DEFAULT PROJECT_CALL_SEQ.NEXTVAL PRIMARY KEY,
    PROJECT_PATIENT_ID NUMBER NOT NULL,
    PROJECT_HOSPITALISATION_ID NUMBER,
    STATUT VARCHAR2(20) DEFAULT 'pending' NOT NULL,
    DATE_APPEL_PREVU DATE,
    DATE_APPEL_REEL DATE,
    DUREE NUMBER DEFAULT 0, -- Durée en secondes
    SCORE NUMBER DEFAULT NULL, -- Score de 0 à 100
    RESUME_APPEL CLOB, -- Résumé détaillé de l'appel
    NOMBRE_TENTATIVES NUMBER DEFAULT 0,
    DERNIERE_TENTATIVE DATE,
    DATE_CREATION DATE DEFAULT SYSDATE,
    DATE_MODIFICATION DATE DEFAULT SYSDATE,
    UTILISATEUR_CREATION VARCHAR2(50),
    UTILISATEUR_MODIFICATION VARCHAR2(50),
    
    -- Contraintes
    CONSTRAINT fk_calls_patient FOREIGN KEY (PROJECT_PATIENT_ID) REFERENCES PATIENTS_SYNC(PROJECT_PATIENT_ID),
    CONSTRAINT fk_calls_hospitalisation FOREIGN KEY (PROJECT_HOSPITALISATION_ID) REFERENCES HOSPITALISATIONS_SYNC(PROJECT_HOSPITALISATION_ID),
    CONSTRAINT ck_calls_statut CHECK (STATUT IN ('pending', 'called', 'failed', 'in_progress')),
    CONSTRAINT ck_calls_score CHECK (SCORE IS NULL OR (SCORE >= 0 AND SCORE <= 100)),
    CONSTRAINT ck_calls_duree CHECK (DUREE >= 0),
    CONSTRAINT ck_calls_tentatives CHECK (NOMBRE_TENTATIVES >= 0)
);

-- Table d'historique des appels (pour audit)
CREATE TABLE CALL_HISTORY (
    HISTORY_ID NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    PROJECT_CALL_ID NUMBER NOT NULL,
    ACTION VARCHAR2(50) NOT NULL, -- 'created', 'updated', 'status_changed', 'deleted'
    ANCIEN_STATUT VARCHAR2(20),
    NOUVEAU_STATUT VARCHAR2(20),
    DONNEES_AVANT CLOB, -- JSON des données avant modification
    DONNEES_APRES CLOB, -- JSON des données après modification
    UTILISATEUR VARCHAR2(50),
    DATE_ACTION DATE DEFAULT SYSDATE,
    CONSTRAINT fk_history_call FOREIGN KEY (PROJECT_CALL_ID) REFERENCES CALLS(PROJECT_CALL_ID)
);

-- Table des scores détaillés (pour l'algorithme médical)
CREATE TABLE SCORES (
    SCORE_ID NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    PROJECT_CALL_ID NUMBER NOT NULL,
    TYPE_SCORE VARCHAR2(50) NOT NULL, -- 'douleur', 'moral', 'traitement', 'global'
    VALEUR_SCORE NUMBER NOT NULL,
    POIDS_SCORE NUMBER DEFAULT 1,
    COMMENTAIRE VARCHAR2(500),
    DATE_CALCUL DATE DEFAULT SYSDATE,
    CONSTRAINT fk_scores_call FOREIGN KEY (PROJECT_CALL_ID) REFERENCES CALLS(PROJECT_CALL_ID)
);

-- Table des métadonnées d'appels (données enrichies)
CREATE TABLE CALL_METADATA (
    METADATA_ID NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    PROJECT_CALL_ID NUMBER NOT NULL,
    CLE_METADONNEE VARCHAR2(100) NOT NULL,
    VALEUR_METADONNEE CLOB,
    TYPE_DONNEE VARCHAR2(20) DEFAULT 'TEXT', -- 'TEXT', 'NUMBER', 'DATE', 'JSON'
    DATE_CREATION DATE DEFAULT SYSDATE,
    CONSTRAINT fk_metadata_call FOREIGN KEY (PROJECT_CALL_ID) REFERENCES CALLS(PROJECT_CALL_ID),
    CONSTRAINT uk_metadata_call_key UNIQUE (PROJECT_CALL_ID, CLE_METADONNEE)
);

-- Index pour améliorer les performances
CREATE INDEX idx_patients_sync_hospital_id ON PATIENTS_SYNC(HOSPITAL_PATIENT_ID);
CREATE INDEX idx_patients_sync_number ON PATIENTS_SYNC(NUMERO_PATIENT);
CREATE INDEX idx_patients_sync_name ON PATIENTS_SYNC(NOM, PRENOM);

CREATE INDEX idx_hospitalisations_sync_hospital_id ON HOSPITALISATIONS_SYNC(HOSPITAL_HOSPITALISATION_ID);
CREATE INDEX idx_hospitalisations_sync_patient ON HOSPITALISATIONS_SYNC(PROJECT_PATIENT_ID);
CREATE INDEX idx_hospitalisations_sync_discharge ON HOSPITALISATIONS_SYNC(DATE_SORTIE);

CREATE INDEX idx_calls_patient ON CALLS(PROJECT_PATIENT_ID);
CREATE INDEX idx_calls_status ON CALLS(STATUT);
CREATE INDEX idx_calls_scheduled ON CALLS(DATE_APPEL_PREVU);
CREATE INDEX idx_calls_actual ON CALLS(DATE_APPEL_REEL);

CREATE INDEX idx_call_history_call ON CALL_HISTORY(PROJECT_CALL_ID);
CREATE INDEX idx_call_history_action ON CALL_HISTORY(ACTION);
CREATE INDEX idx_call_history_date ON CALL_HISTORY(DATE_ACTION);

CREATE INDEX idx_scores_call ON SCORES(PROJECT_CALL_ID);
CREATE INDEX idx_scores_type ON SCORES(TYPE_SCORE);

CREATE INDEX idx_metadata_call ON CALL_METADATA(PROJECT_CALL_ID);
CREATE INDEX idx_metadata_key ON CALL_METADATA(CLE_METADONNEE);

-- Vues utiles pour les rapports
CREATE OR REPLACE VIEW V_APPELS_EN_COURS AS
SELECT 
    c.PROJECT_CALL_ID,
    p.NUMERO_PATIENT,
    p.NOM,
    p.PRENOM,
    p.TELEPHONE,
    h.SERVICE,
    h.MEDECIN,
    h.DATE_SORTIE,
    c.DATE_APPEL_PREVU,
    c.STATUT,
    c.NOMBRE_TENTATIVES
FROM CALLS c
JOIN PATIENTS_SYNC p ON c.PROJECT_PATIENT_ID = p.PROJECT_PATIENT_ID
LEFT JOIN HOSPITALISATIONS_SYNC h ON c.PROJECT_HOSPITALISATION_ID = h.PROJECT_HOSPITALISATION_ID
WHERE c.STATUT = 'pending'
ORDER BY c.DATE_APPEL_PREVU;

CREATE OR REPLACE VIEW V_STATISTIQUES_APPELS AS
SELECT 
    STATUT,
    COUNT(*) as NOMBRE_APPELS,
    AVG(DUREE) as DUREE_MOYENNE,
    AVG(SCORE) as SCORE_MOYEN,
    MIN(DATE_CREATION) as PREMIER_APPEL,
    MAX(DATE_CREATION) as DERNIER_APPEL
FROM CALLS
GROUP BY STATUT;

-- Procédure pour marquer un appel comme échec après un nombre maximum de tentatives
CREATE OR REPLACE PROCEDURE MARQUER_APPEL_ECHEC(
    p_patient_id IN NUMBER,
    p_max_tentatives IN NUMBER DEFAULT 3
) AS
    v_tentatives NUMBER;
BEGIN
    -- Récupérer le nombre de tentatives actuelles
    SELECT NOMBRE_TENTATIVES INTO v_tentatives
    FROM CALLS 
    WHERE PROJECT_PATIENT_ID = p_patient_id 
    AND STATUT = 'pending';
    
    -- Si le nombre maximum de tentatives est dépassé, marquer comme échec
    IF v_tentatives >= p_max_tentatives THEN
        UPDATE CALLS 
        SET STATUT = 'failed',
            DATE_MODIFICATION = SYSDATE
        WHERE PROJECT_PATIENT_ID = p_patient_id 
        AND STATUT = 'pending';
        
        COMMIT;
    END IF;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        NULL; -- Aucun appel en cours pour ce patient
    WHEN OTHERS THEN
        RAISE;
END MARQUER_APPEL_ECHEC;
/

-- Procédure pour synchroniser automatiquement les nouvelles données
CREATE OR REPLACE PROCEDURE SYNC_NEW_DATA AS
BEGIN
    -- Cette procédure sera appelée périodiquement pour synchroniser
    -- les nouvelles données de la base hospitalière
    NULL; -- À implémenter selon les besoins
END SYNC_NEW_DATA;
/

-- Commentaires sur les tables
COMMENT ON TABLE PATIENTS_SYNC IS 'Copie synchronisée des patients de la base hospitalière';
COMMENT ON TABLE HOSPITALISATIONS_SYNC IS 'Copie synchronisée des hospitalisations de la base hospitalière';
COMMENT ON TABLE CALLS IS 'Appels post-hospitalisation gérés par HelloJADE';
COMMENT ON TABLE CALL_HISTORY IS 'Historique des modifications d''appels pour audit';
COMMENT ON TABLE SCORES IS 'Scores détaillés calculés par l''algorithme médical';
COMMENT ON TABLE CALL_METADATA IS 'Métadonnées enrichies des appels';

COMMIT; 