const fetch = require('node-fetch');

async function testMonitoringUI() {
    try {
        console.log('üß™ Test de l\'interface de monitoring...');
        console.log('='.repeat(60));
        
        // Test 1: V√©rification du statut PostgreSQL
        console.log('\nüìä Test 1: V√©rification du statut PostgreSQL...');
        const statusResponse = await fetch('http://localhost:8000/api/monitoring/hellojade-db');
        const statusData = await statusResponse.json();
        
        console.log('‚úÖ Statut PostgreSQL:');
        console.log(`   - Status: ${statusData.status}`);
        console.log(`   - Version: ${statusData.version}`);
        console.log(`   - Message: ${statusData.message}`);
        
        if (statusData.syncStatus) {
            console.log('\nüîÑ Statut de synchronisation:');
            console.log(`   - √Ä jour: ${statusData.syncStatus.isUpToDate}`);
            console.log(`   - Derni√®re sync: ${statusData.syncStatus.lastSyncTime}`);
            console.log(`   - √Çge: ${statusData.syncStatus.syncAgeMinutes} minutes`);
            console.log(`   - Message: ${statusData.syncStatus.message}`);
            
            // Explication du statut "warning"
            if (statusData.status === 'warning') {
                console.log('\n‚ö†Ô∏è Pourquoi "warning" ?');
                console.log(`   - La synchronisation n'est pas √† jour (${statusData.syncStatus.syncAgeMinutes} minutes)`);
                console.log(`   - Le seuil est de 10 minutes pour consid√©rer comme "√† jour"`);
                console.log(`   - Cliquez sur "Synchroniser" pour r√©soudre le probl√®me`);
            }
        }
        
        // Test 2: Synchronisation manuelle
        console.log('\nüîÑ Test 2: Synchronisation manuelle...');
        const syncResponse = await fetch('http://localhost:8000/api/monitoring/hellojade-db/sync', {
            method: 'POST'
        });
        const syncData = await syncResponse.json();
        
        console.log('‚úÖ R√©sultat synchronisation:');
        console.log(`   - Succ√®s: ${syncData.success}`);
        console.log(`   - Timestamp: ${syncData.timestamp}`);
        console.log(`   - Message: ${syncData.message}`);
        
        if (syncData.results) {
            console.log('\nüìä D√©tails par table:');
            Object.entries(syncData.results).forEach(([table, result]) => {
                if (result.success) {
                    console.log(`   - ${table}: ‚úÖ ${result.message}`);
                    console.log(`     Dur√©e: ${result.duration}ms, D√©bit: ${result.throughput} rec/sec`);
                } else {
                    console.log(`   - ${table}: ‚ùå ${result.message}`);
                }
            });
        }
        
        // Test 3: V√©rification apr√®s synchronisation
        console.log('\nüìä Test 3: V√©rification apr√®s synchronisation...');
        const statusAfterResponse = await fetch('http://localhost:8000/api/monitoring/hellojade-db');
        const statusAfterData = await statusAfterResponse.json();
        
        console.log('‚úÖ Statut apr√®s synchronisation:');
        console.log(`   - Status: ${statusAfterData.status}`);
        console.log(`   - Message: ${statusAfterData.message}`);
        
        if (statusAfterData.syncStatus) {
            console.log(`   - √Ä jour: ${statusAfterData.syncStatus.isUpToDate}`);
            console.log(`   - Derni√®re sync: ${statusAfterData.syncStatus.lastSyncTime}`);
        }
        
        console.log('\nüéâ Tests termin√©s avec succ√®s !');
        
        // R√©sum√© des fonctionnalit√©s
        console.log('\nüìà Fonctionnalit√©s disponibles dans l\'interface:');
        console.log('   ‚úÖ Bouton "Synchroniser" dans la carte HelloJADE PostgreSQL');
        console.log('   ‚úÖ Affichage du statut de synchronisation (√† jour/p√©rim√©)');
        console.log('   ‚úÖ D√©tails de la derni√®re synchronisation');
        console.log('   ‚úÖ Logs en temps r√©el avec possibilit√© de copie');
        console.log('   ‚úÖ Auto-scroll et contr√¥le des logs');
        console.log('   ‚úÖ M√©triques de performance d√©taill√©es');
        
    } catch (error) {
        console.error('‚ùå Erreur lors des tests:', error);
    }
}

// Ex√©cution des tests
testMonitoringUI(); 