const { checkHelloJADEDatabase, performManualSync } = require('./routes/monitoring');

async function testNewMonitoring() {
    try {
        console.log('üß™ Test de la nouvelle logique de monitoring PostgreSQL...');
        console.log('='.repeat(60));
        
        // Test 1: V√©rification du statut PostgreSQL
        console.log('\nüìä Test 1: V√©rification du statut PostgreSQL...');
        const statusResult = await checkHelloJADEDatabase();
        
        console.log('‚úÖ Statut PostgreSQL:');
        console.log(`   - Status: ${statusResult.status}`);
        console.log(`   - Version: ${statusResult.version}`);
        console.log(`   - Message: ${statusResult.message}`);
        
        if (statusResult.syncStatus) {
            console.log('\nüîÑ Statut de synchronisation:');
            console.log(`   - √Ä jour: ${statusResult.syncStatus.isUpToDate}`);
            console.log(`   - Derni√®re sync: ${statusResult.syncStatus.lastSyncTime}`);
            console.log(`   - √Çge: ${statusResult.syncStatus.syncAgeMinutes} minutes`);
            console.log(`   - Message: ${statusResult.syncStatus.message}`);
        }
        
        if (statusResult.hellojadeTables) {
            console.log('\nüìã Tables HelloJADE:');
            Object.entries(statusResult.hellojadeTables).forEach(([table, count]) => {
                console.log(`   - ${table}: ${count} enregistrements`);
            });
        }
        
        // Test 2: Synchronisation manuelle
        console.log('\nüîÑ Test 2: Synchronisation manuelle...');
        const syncResult = await performManualSync();
        
        console.log('‚úÖ R√©sultat synchronisation:');
        console.log(`   - Succ√®s: ${syncResult.success}`);
        console.log(`   - Timestamp: ${syncResult.timestamp}`);
        console.log(`   - Message: ${syncResult.message}`);
        
        if (syncResult.results) {
            console.log('\nüìä D√©tails par table:');
            Object.entries(syncResult.results).forEach(([table, result]) => {
                console.log(`   - ${table}: ${result.success ? '‚úÖ' : '‚ùå'} ${result.message}`);
            });
        }
        
        // Test 3: V√©rification apr√®s synchronisation
        console.log('\nüìä Test 3: V√©rification apr√®s synchronisation...');
        const statusAfterSync = await checkHelloJADEDatabase();
        
        console.log('‚úÖ Statut apr√®s synchronisation:');
        console.log(`   - Status: ${statusAfterSync.status}`);
        console.log(`   - Message: ${statusAfterSync.message}`);
        
        if (statusAfterSync.syncStatus) {
            console.log(`   - √Ä jour: ${statusAfterSync.syncStatus.isUpToDate}`);
            console.log(`   - Derni√®re sync: ${statusAfterSync.syncStatus.lastSyncTime}`);
        }
        
        console.log('\nüéâ Tests termin√©s avec succ√®s !');
        
    } catch (error) {
        console.error('‚ùå Erreur lors des tests:', error);
    }
}

// Ex√©cution des tests
testNewMonitoring(); 