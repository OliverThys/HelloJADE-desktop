const { initialize, executeQuery } = require('./database')

async function cleanHelloJADETables() {
  try {
    console.log('üßπ Nettoyage des tables HelloJADE...')
    
    // Initialiser la base de donn√©es
    console.log('üîÑ Initialisation de la base de donn√©es...')
    await initialize()
    
    // Liste des tables √† supprimer (dans l'ordre pour √©viter les probl√®mes de contraintes)
    const tablesToDrop = [
      'CALL_METADATA',
      'SCORES', 
      'CALL_HISTORY',
      'CALLS',
      'HOSPITALISATIONS_SYNC',
      'PATIENTS_SYNC'
    ]
    
    // Liste des s√©quences √† supprimer
    const sequencesToDrop = [
      'PROJECT_CALL_SEQ',
      'PROJECT_HOSPITALISATION_SEQ',
      'PROJECT_PATIENT_SEQ'
    ]
    
    // Liste des vues √† supprimer
    const viewsToDrop = [
      'V_STATISTIQUES_APPELS',
      'V_APPELS_EN_COURS'
    ]
    
    console.log('üóëÔ∏è Suppression des vues...')
    for (const view of viewsToDrop) {
      try {
        await executeQuery(`DROP VIEW ${view}`)
        console.log(`‚úÖ Vue ${view} supprim√©e`)
      } catch (error) {
        if (error.message.includes('ORA-00942')) {
          console.log(`‚ö†Ô∏è Vue ${view} n'existe pas, ignor√©e`)
        } else {
          console.log(`‚ö†Ô∏è Erreur lors de la suppression de la vue ${view}: ${error.message}`)
        }
      }
    }
    
    console.log('üóëÔ∏è Suppression des tables...')
    for (const table of tablesToDrop) {
      try {
        await executeQuery(`DROP TABLE ${table} CASCADE CONSTRAINTS`)
        console.log(`‚úÖ Table ${table} supprim√©e`)
      } catch (error) {
        if (error.message.includes('ORA-00942')) {
          console.log(`‚ö†Ô∏è Table ${table} n'existe pas, ignor√©e`)
        } else {
          console.log(`‚ö†Ô∏è Erreur lors de la suppression de la table ${table}: ${error.message}`)
        }
      }
    }
    
    console.log('üóëÔ∏è Suppression des s√©quences...')
    for (const sequence of sequencesToDrop) {
      try {
        await executeQuery(`DROP SEQUENCE ${sequence}`)
        console.log(`‚úÖ S√©quence ${sequence} supprim√©e`)
      } catch (error) {
        if (error.message.includes('ORA-02289')) {
          console.log(`‚ö†Ô∏è S√©quence ${sequence} n'existe pas, ignor√©e`)
        } else {
          console.log(`‚ö†Ô∏è Erreur lors de la suppression de la s√©quence ${sequence}: ${error.message}`)
        }
      }
    }
    
    console.log('üéâ Nettoyage termin√© ! Toutes les tables HelloJADE ont √©t√© supprim√©es.')
    console.log('üìä Vous pouvez maintenant relancer le script setup pour recr√©er les tables proprement.')
    
  } catch (error) {
    console.error('‚ùå Erreur lors du nettoyage:', error)
    throw error
  }
}

// Ex√©cuter le script
cleanHelloJADETables()
  .then(() => {
    console.log('‚úÖ Script de nettoyage termin√© avec succ√®s')
    process.exit(0)
  })
  .catch((error) => {
    console.error('‚ùå Script de nettoyage √©chou√©:', error)
    process.exit(1)
  }) 