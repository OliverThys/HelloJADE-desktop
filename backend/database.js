const oracledb = require('oracledb')
require('dotenv').config({ path: './config.env' })

// Configuration Oracle
const dbConfig = {
  user: process.env.ORACLE_USER,
  password: process.env.ORACLE_PASSWORD,
  connectString: `${process.env.ORACLE_HOST}:${process.env.ORACLE_PORT}/${process.env.ORACLE_SERVICE}`,
  poolMin: 2,
  poolMax: 10,
  poolIncrement: 1,
  charset: 'AL32UTF8',
  // Augmenter les timeouts
  poolTimeout: 60,
  queueTimeout: 60000,
  // Timeouts de connexion
  connectTimeout: 60000,
  transportConnectTimeout: 60000,
  // Configuration de connexion
  events: false,
  externalAuth: false
}

// Log de la configuration (sans le mot de passe)
console.log('üîß Configuration Oracle:', {
  host: process.env.ORACLE_HOST,
  port: process.env.ORACLE_PORT,
  service: process.env.ORACLE_SERVICE,
  user: process.env.ORACLE_USER,
  connectString: dbConfig.connectString
})

// Initialiser le pool de connexions
async function initialize() {
  try {
    console.log('üîÑ Tentative de connexion √† Oracle...')
    console.log('üîß Configuration utilis√©e:', {
      host: process.env.ORACLE_HOST,
      port: process.env.ORACLE_PORT,
      service: process.env.ORACLE_SERVICE,
      user: process.env.ORACLE_USER,
      connectString: dbConfig.connectString
    })
    
    // V√©rifier si un pool existe d√©j√† de mani√®re s√©curis√©e
    try {
      const existingPool = oracledb.getPool()
      if (existingPool) {
        console.log('‚ö†Ô∏è Pool existant d√©tect√©, fermeture...')
        await existingPool.close(10)
        console.log('‚úÖ Pool existant ferm√©')
      }
    } catch (poolError) {
      // Si getPool() √©choue, c'est normal - aucun pool n'existe
      console.log('‚ÑπÔ∏è Aucun pool existant d√©tect√©')
    }
    
    console.log('üèóÔ∏è Cr√©ation du nouveau pool...')
    await oracledb.createPool(dbConfig)
    console.log('‚úÖ Pool de connexion Oracle cr√©√© avec succ√®s')
    console.log(`üìä Connect√© √† ${process.env.ORACLE_HOST}:${process.env.ORACLE_PORT}/${process.env.ORACLE_SERVICE}`)
  } catch (err) {
    console.error('‚ùå Erreur lors de la cr√©ation du pool Oracle:', err)
    console.error('üîç Stack trace:', err.stack)
    console.error('üîç V√©rifiez que:')
    console.error('   - La VM Windows Server est accessible sur 192.168.1.100')
    console.error('   - Oracle Database 21c XE est d√©marr√©')
    console.error('   - Le port 1521 est ouvert')
    console.error('   - L\'utilisateur hellojade existe')
    throw err
  }
}

// Obtenir une connexion du pool
async function getConnection() {
  try {
    console.log('üîó Obtention d\'une connexion du pool...')
    
    // V√©rifier si le pool existe
    const pool = oracledb.getPool()
    if (!pool) {
      throw new Error('Aucun pool de connexion disponible')
    }
    
    console.log('üìä Pool disponible, obtention de la connexion...')
    const connection = await oracledb.getConnection()
    console.log('‚úÖ Connexion obtenue avec succ√®s')
    return connection
  } catch (err) {
    console.error('‚ùå Erreur lors de l\'obtention d\'une connexion:', err)
    console.error('üîç Stack trace:', err.stack)
    throw err
  }
}

// Fermer le pool
async function closePool() {
  try {
    await oracledb.getPool().close(10)
    console.log('‚úÖ Pool Oracle ferm√©')
  } catch (err) {
    console.error('‚ùå Erreur lors de la fermeture du pool:', err)
  }
}

// Ex√©cuter une requ√™te
async function executeQuery(sql, binds = [], options = {}) {
  let connection
  try {
    console.log('üîç Ex√©cution de la requ√™te SQL...')
    console.log('üìù SQL:', sql)
    console.log('üîó Binds:', binds)
    console.log('‚öôÔ∏è Options:', options)
    
    connection = await getConnection()
    
    const defaultOptions = {
      outFormat: oracledb.OUT_FORMAT_OBJECT,
      autoCommit: true
    }
    
    const finalOptions = { ...defaultOptions, ...options }
    console.log('‚öôÔ∏è Options finales:', finalOptions)
    
    const result = await connection.execute(sql, binds, finalOptions)
    console.log(`‚úÖ Requ√™te ex√©cut√©e avec succ√®s. ${result.rows ? result.rows.length : 0} lignes retourn√©es`)
    
    return result.rows || []
  } catch (err) {
    console.error('‚ùå Erreur lors de l\'ex√©cution de la requ√™te:', err)
    console.error('üîç Stack trace:', err.stack)
    throw err
  } finally {
    if (connection) {
      try {
        await connection.close()
        console.log('üîó Connexion ferm√©e avec succ√®s')
      } catch (err) {
        console.error('‚ùå Erreur lors de la fermeture de la connexion:', err)
      }
    }
  }
}

module.exports = {
  initialize,
  getConnection,
  closePool,
  executeQuery
} 