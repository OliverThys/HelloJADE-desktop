input {
  # Logs du backend Flask
  file {
    path => "/var/log/hellojade/backend.log"
    type => "backend"
    start_position => "beginning"
    codec => json
  }
  
  # Logs du frontend
  file {
    path => "/var/log/hellojade/frontend.log"
    type => "frontend"
    start_position => "beginning"
    codec => json
  }
  
  # Logs Asterisk
  file {
    path => "/var/log/asterisk/full"
    type => "asterisk"
    start_position => "beginning"
  }
  
  # Logs système
  file {
    path => "/var/log/hellojade/system.log"
    type => "system"
    start_position => "beginning"
    codec => json
  }
  
  # Logs d'audit
  file {
    path => "/var/log/hellojade/audit.log"
    type => "audit"
    start_position => "beginning"
    codec => json
  }
}

filter {
  if [type] == "backend" {
    # Traitement des logs backend Flask
    grok {
      match => { "message" => "%{TIMESTAMP_ISO8601:timestamp} - %{WORD:logger} - %{LOGLEVEL:level} - %{GREEDYDATA:message}" }
    }
    
    date {
      match => [ "timestamp", "ISO8601" ]
      target => "@timestamp"
    }
    
    mutate {
      add_field => { "service" => "hellojade-backend" }
      add_field => { "environment" => "%{ENVIRONMENT}" }
    }
  }
  
  if [type] == "frontend" {
    # Traitement des logs frontend Vue.js
    grok {
      match => { "message" => "%{TIMESTAMP_ISO8601:timestamp} - %{WORD:logger} - %{LOGLEVEL:level} - %{GREEDYDATA:message}" }
    }
    
    date {
      match => [ "timestamp", "ISO8601" ]
      target => "@timestamp"
    }
    
    mutate {
      add_field => { "service" => "hellojade-frontend" }
      add_field => { "environment" => "%{ENVIRONMENT}" }
    }
  }
  
  if [type] == "asterisk" {
    # Traitement des logs Asterisk
    grok {
      match => { "message" => "\[%{TIMESTAMP_ISO8601:timestamp}\] %{LOGLEVEL:level} %{GREEDYDATA:message}" }
    }
    
    date {
      match => [ "timestamp", "ISO8601" ]
      target => "@timestamp"
    }
    
    mutate {
      add_field => { "service" => "asterisk" }
    }
  }
  
  if [type] == "system" {
    # Traitement des logs système
    mutate {
      add_field => { "service" => "system" }
    }
  }
  
  if [type] == "audit" {
    # Traitement des logs d'audit
    mutate {
      add_field => { "service" => "audit" }
      add_field => { "environment" => "%{ENVIRONMENT}" }
    }
  }
  
  # Filtrage des logs sensibles
  if [message] =~ /password|secret|token/i {
    mutate {
      replace => { "message" => "[REDACTED]" }
    }
  }
  
  # Ajout de métadonnées
  mutate {
    add_field => { "host" => "%{HOSTNAME}" }
    add_field => { "version" => "1.0.0" }
  }
}

output {
  # Envoi vers Elasticsearch
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "hellojade-%{+YYYY.MM.dd}"
    document_type => "_doc"
    template_name => "hellojade"
    template => "/etc/logstash/templates/hellojade-template.json"
    template_overwrite => true
  }
  
  # Logs d'erreur critiques vers un fichier séparé
  if [level] == "ERROR" or [level] == "CRITICAL" {
    file {
      path => "/var/log/hellojade/errors.log"
      codec => json
    }
  }
} 